#Importing the open-sourced MySQL Sakila Database(DB) to Python,
#by importing the sqlite3 package.
#Importing as well the other packages we will later need.

import sqlite3
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

mydb = sqlite3.connect('/Users/davidgomez/Desktop/Python Exploratory Analysis/sakila.db')

#Writing a function to verify the DB has been succesfully imported

if mydb:
    print("Connection Successful")
else:
    print("Connection Unsuccessful")

#Importing the desired Pandas dataframe by executing the following SQL query on the `mydb`
#SQL database. Setting the index column, and parsing dates for better data handling.

df = pd.read_sql_query('''
    SELECT
        rental.rental_id, rental.rental_date, rental.return_date,
        customer.last_name AS customer_lastname,
        store.store_id,
        city.city AS rental_store_city,
        film.title AS film_title, film.rental_duration AS film_rental_duration,
        film.rental_rate AS film_rental_rate, film.replacement_cost AS film_replacement_cost,
        film.rating AS film_rating
    FROM rental
    INNER JOIN customer ON rental.customer_id == customer.customer_id
    INNER JOIN inventory ON rental.inventory_id == inventory.inventory_id
    INNER JOIN store ON inventory.store_id == store.store_id
    INNER JOIN address ON store.address_id == address.address_id
    INNER JOIN city ON address.city_id == city.city_id
    INNER JOIN film ON inventory.film_id == film.film_id
    ;
''', mydb, index_col='rental_id', parse_dates=['rental_date', 'return_date'])


#Once the Database has been successfully imported and the Dataframe (df) has been created,
#let's now explore the Dataframe.

df.describe()
df.head()
df.shape
df.shape[0]

#The Dataframe contains 16044 rows and 10 columns.

#Data Cleaning. First, I will check for null values in our DataFrame and will drop them.

df.info()
df.isnull().sum()

#We have 183 missing records of return dates, which may be due to unreturned movies
#at the time the DataBase was imported.
#In this case, dropping the NaN values (blank return_date values) does not seem viable, as we need those
#records to ensure the rentals are returned. However, below I will comment out the code for how I would do it,
# if this were to be done.

'''
df = df.dropna() #Changes are mostly inmutable in Pandas, so to make them permanent, I would need to modify the
#DataFrame df.
df.info() #The records would have been reduced to 15,861, dropping the 183 missing records. '''

#Let's now do some Exploratory Analysis of the df DataFrame. Please note that the following questions
# were designed solely to demonstrate proficiency in exploratory data analysis in Python.

#Question #1. What's the mean of rental duration for all films, rounded to
# two decimals?

round(df['film_rental_duration'].mean(),2)

#Answer: The films are rented for an average of 4.94 days before they are returned.

#Question #2. What's the most common rental duration? Plot the results.

df['film_rental_duration'].value_counts()
df['film_rental_duration'].value_counts().plot(kind= 'bar', figsize=(14,6))

#Answer: The most common rental duration is 3 days, with 3,412 rentals.

#Question #3. What is the most common rental rate? Plot the results.

df['film_rental_rate'].value_counts()
df['film_rental_rate'].value_counts().plot(kind= 'pie', figsize=(6,6))

#Answer: The most common rental rate is 0.99 USD, with 5,652 titles renting at that price.

#Question #4.How is the replacement cost distributed?

ax = df['film_replacement_cost'].plot(kind='density', figsize=(14,6))
ax.axvline(df['film_replacement_cost'].mean(), color='red')
ax.axvline(df['film_replacement_cost'].median(), color='green')

#Question #5. How many films of each rating does the store have? Plot the results.

df['film_rating'].value_counts()
df['film_rating'].value_counts().plot(kind= 'bar', figsize=(14,6))

#Answer: The DVD rental store has 3,585 PG-13 titles, 3,293 NC-17 films, 3,212 PG,
#3,181 R, and 2,773 G-rated movies.

#Question #6. Does the film replacement cost vary depending on film rating?

df[['film_replacement_cost', 'film_rating']].boxplot(by='film_rating', figsize=(14,6))

#Answer: By analyzing the box chart, we can conclude that yes, film
#replacement cost varies across film ratings. In fact, this is highest for PG-13 movies
#and lowest for PG-rated titles.

#Question #7. Add a new calculated column to show the rental days. I will use a lambda function to do so.

df['rental_days'] = df[['rental_date','return_date']].apply (lambda x: (x[1]-x[0]).days, axis=1)
df['rental_days'].head()

#Question #8. How are the rental_days distributed?

ax = df['rental_days'].plot(kind= 'density', figsize=(14,6))
ax.axvline(df['rental_days'].mean(), color = 'red')

#Question #9. What is the highest daily rental rate for the films?

df['daily_rental_rate'] = df['film_rental_rate'] / df['film_rental_duration']

df ['daily_rental_rate'].sort_values(ascending=False).head(1)

#The highest daily rental rate is 1.66 USD.

#Question #10. List the 5 films with the lowest daily rental rate.

lowest = df.loc[df['daily_rental_rate'] == df['daily_rental_rate'].min()].head(5)
print(lowest['film_title'])

#Answer: The top 5 titles with the lowest daily rental are  as follows: Roman Punk,
#Borrowers Bedazzled, Gun Bonnie, Greedy Roots, and Patient Sister.

#Question #11. List the 3 films with the highest daily rental rate.

highest = df.loc[df['daily_rental_rate'] == df['daily_rental_rate'].max()].head(3)
print(highest['film_title'])

#Answer: The top 3 titles with the highest daily rental are as follows: King Evolution,
#Minds Truman, Teen Apollo.

#Question #12. How many rentals were made in Lethbridge city?

df.loc[df['rental_store_city'] == 'Lethbridge'].shape[0]

#Answer: 7,923 rentals were made in Lethbridge city.

#Question #13. How many rentals were made in Woodridge city
#with a rental duration higher than 5 days?

df.loc[(df['rental_store_city'] == 'Woodridge') & (df['film_rental_duration'] > 5)].shape[0]

#Answer: 3,186 films with a rental duration of more than 5 days were rented in Woodridge.

#Question #14. How many rentals were made at the store with id 2 or with a replacement
#cost lower than 10.99 USD?

df.loc[(df['store_id'] == 2) | (df['film_replacement_cost'] < 10.99)].shape[0]

#Answer: 8,444 rentals that either have a replacement cost lower than 10.99 USD or were
#rented from store_id 2.
